{"version":3,"sources":["webpack:///./src/main/js/common/Tools.js"],"names":["APP_BASE_URL","JSON_TYPE","handleApiError","response","ok","status","removeToken","window","location","href","Promise","resolve","console","log","statusText","text","doFetch","url","method","data","params","body","headers","fetch"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA,IAAMA,YAAY,GAAG,GAArB;AACA,IAAMC,SAAS,GAAG,kBAAlB;AAGO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAc;AAC1C,MAAIA,QAAQ,CAACC,EAAb,EAAiB,OAAOD,QAAP;;AACjB,UAAQA,QAAQ,CAACE,MAAjB;AACE,SAAK,GAAL;AACEC,iBAAW;AACXC,YAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBT,YAAvB;AACA,YAAMU,OAAO,CAACC,OAAR,CAAgB,yBAAhB,CAAN;;AACF,SAAK,GAAL;AACEC,aAAO,CAACC,GAAR,CAAY,mBAAmBV,QAAQ,CAACW,UAAxC;AACA,YAAMJ,OAAO,CAACC,OAAR,CAAgB,6BAAhB,CAAN;;AACF,SAAK,GAAL;AACEC,aAAO,CAACC,GAAR,CAAY,mBAAmBV,QAAQ,CAACW,UAAxC;AACA,YAAMJ,OAAO,CAACC,OAAR,CAAgB,0BAAhB,CAAN;;AACF,SAAK,GAAL;AACEC,aAAO,CAACC,GAAR,CAAY,mBAAmBV,QAAQ,CAACW,UAAxC;AACA,YAAMJ,OAAO,CAACC,OAAR,CAAgB,6BAAhB,CAAN;;AACF,SAAK,GAAL;AACA,SAAK,GAAL;AACEC,aAAO,CAACC,GAAR,CAAY,mBAAmBV,QAAQ,CAACW,UAAxC;AACA,YAAMJ,OAAO,CAACC,OAAR,CAAgB,4BAAhB,CAAN;;AACF;AACE,YAAMR,QAAQ,CAACY,IAAT,EAAN;AAnBJ;AAqBD,CAvBM;AAyBP;AACA;AACA;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAuB;AAC5C,MAAMC,MAAM,GAAG;AACbF,UAAM,EAAEA,MADK;AAEbG,QAAI,EAAEF,IAFO;AAGbG,WAAO,EAAE;AACP,sBAAgBrB;AADT;AAHI,GAAf;AAOA,MAAIkB,IAAJ,EAAUC,MAAM,CAACC,IAAP,GAAcF,IAAd;AAEV,SAAOI,KAAK,CAACvB,YAAY,GAAGiB,GAAhB,EAAqBG,MAArB,CAAZ;AACD,CAXM,C","file":"main.663576531b9cd5e56611.hot-update.js","sourcesContent":["const APP_BASE_URL = \"/\";\nconst JSON_TYPE = \"application/json\";\n\n\nexport const handleApiError = (response) => {\n  if (response.ok) return response;\n  switch (response.status) {\n    case 401:\n      removeToken();\n      window.location.href = APP_BASE_URL;\n      throw Promise.resolve(\"Error.unauthorized-user\");\n    case 403:\n      console.log(\"Client Error: \" + response.statusText);\n      throw Promise.resolve(\"Error.invalid-pass-or-login\");\n    case 404:\n      console.log(\"Client Error: \" + response.statusText);\n      throw Promise.resolve(\"Error.resource-not-found\");\n    case 500:\n      console.log(\"Server Error: \" + response.statusText);\n      throw Promise.resolve(\"Error.internal-server-error\");\n    case 503:\n    case 504:\n      console.log(\"Server Error: \" + response.statusText);\n      throw Promise.resolve(\"Error.server-not-available\");\n    default:\n      throw response.text();\n  }\n};\n\n/**\n * supports upload too\n */\nexport const doFetch = (url, method, data) => {\n  const params = {\n    method: method,\n    body: data,\n    headers: {\n      \"Content-Type\": JSON_TYPE,\n    },\n  };\n  if (data) params.body = data;\n\n  return fetch(APP_BASE_URL + url, params);\n};\n"],"sourceRoot":""}