{"version":3,"sources":["webpack:///./src/main/js/components/Books.js"],"names":["Books","getModel","doFetch","then","handleApiError","response","json","setState","data","refreshList","error","console","loadData","prevProps","state","rows","map","tap","editTap","Object","assign","edit","del","confirmDelete","geo_area_id","model","Component","msgPrefix","idList","id","GridProperty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;IAEMA,K;;;;;;;;;;;;;;;;4DACIA,KAAK,CAACC,QAAN,CAAe,MAAf,EAAuB,CAC7B,IAD6B,EAE7B,OAF6B,EAG7B,QAH6B,EAI7B,QAJ6B,CAAvB,C;;+DAiBG,YAAM;AACfC,aAAO,CAAC,YAAD,EAAe,KAAf,CAAP,CACGC,IADH,CACQC,cADR,EAEGD,IAFH,CAEQ,UAACE,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OAFR,EAGGH,IAHH,CAGQ,UAACG,IAAD;AAAA,eAAU,MAAKC,QAAL,CAAc;AAAEC,cAAI,EAAEF,IAAR;AAAcG,qBAAW,EAAE;AAA3B,SAAd,CAAV;AAAA,OAHR,WAIS,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAJT;AAKD,K;;;;;;;WAhBD,6BAAoB;AAClB,WAAKE,QAAL;AACD;;;WAED,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAI,KAAKC,KAAL,CAAWL,WAAf,EAA4B;AAC1B,aAAKG,QAAL;AACD;AACF;;;WAeD,kBAAS;AAAA;;AAAA,UACCJ,IADD,GACU,KAAKM,KADf,CACCN,IADD;AAEP,UAAMO,IAAI,GAAGP,IAAI,CAACQ,GAAL,CAAS,UAACC,GAAD,EAAS;AAC3B,YAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,GAAlB,CAAhB;AACA,YAAMI,IAAI,gBACR,2DAAC,UAAD;AAAY,kBAAQ,EAAC,aAArB;AAAmC,iBAAO,EAAE;AAAA,mBAAM,MAAI,CAACH,OAAL,CAAaA,OAAb,CAAN;AAAA;AAA5C,wBACE,2DAAC,QAAD,OADF,CADF;AAMA,YAAMI,GAAG,gBACP,2DAAC,UAAD;AAAY,kBAAQ,EAAC,eAArB;AAAqC,iBAAO,EAAE;AAAA,mBAAM,MAAI,CAACC,aAAL,CAAmBL,OAAnB,CAAN;AAAA;AAA9C,wBACE,2DAAC,UAAD,OADF,CADF;AAMAD,WAAG,CAAC,SAAD,CAAH,gBACE,yEACGI,IADH,OACUC,GADV,CADF;AAMAL,WAAG,CAAC,IAAD,CAAH,GAAYA,GAAG,CAACO,WAAhB;AACA,eAAOP,GAAP;AACD,OAtBU,CAAb;AAwBA,0BACE,qFACE,6FADF,eAEE,2DAAC,2IAAD;AAAM,aAAK,EAAE,KAAKQ,KAAlB;AAAyB,YAAI,EAAEV;AAA/B,QAFF,CADF;AAMD;;;;EA/DiBW,+C;;gBAAd1B,K,cA0Bc,UAAC2B,SAAD,EAAYC,MAAZ,EAAuB;AACvC,SAAOA,MAAM,CAACZ,GAAP,CAAW,UAACa,EAAD;AAAA,WAAQ,IAAIC,YAAJ,CAAiBD,EAAjB,EAAqBA,EAArB,CAAR;AAAA,GAAX,CAAP;AACD,C;;AAsCY7B,oEAAf,E","file":"main.188e4ab534c543480a54.hot-update.js","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from \"../../common/Grid\";\n\nclass Books extends Component {\n  model = Books.getModel(\"Book\", [\n    \"id\",\n    \"title\",\n    \"author\",\n    \"genres\",\n  ]);\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.state.refreshList) {\n      this.loadData();\n    }\n  }\n\n  loadData = () => {\n    doFetch(\"/api/books\", \"GET\")\n      .then(handleApiError)\n      .then((response) => response.json())\n      .then((json) => this.setState({ data: json, refreshList: false }))\n      .catch((error) => console.error(error));\n  };\n\n  static getModel = (msgPrefix, idList) => {\n    return idList.map((id) => new GridProperty(id, id));\n  };\n\n  \n  render() {\n    const { data } = this.state;\n    const rows = data.map((tap) => {\n        const editTap = Object.assign({}, tap);\n        const edit = (\n          <ActionLink titleKey=\"common.edit\" onClick={() => this.editTap(editTap)}>\n            <IconEdit />\n          </ActionLink>\n        );\n  \n        const del = (\n          <ActionLink titleKey=\"common.delete\" onClick={() => this.confirmDelete(editTap)}>\n            <IconDelete />\n          </ActionLink>\n        );\n  \n        tap[\"actions\"] = (\n          <span>\n            {edit} {del}\n          </span>\n        );\n  \n        tap[\"id\"] = tap.geo_area_id;\n        return tap;\n      });\n\n    return (\n      <div>\n        <h1>Book: My React App!</h1>\n        <Grid model={this.model} data={rows} />\n      </div>\n    );\n  }\n}\n\nexport default Books;\n"],"sourceRoot":""}