{"version":3,"sources":["webpack:///./src/main/js/components/Books.js"],"names":["Books","getModel","book","state","selected","id","geo_area_id","doFetch","then","handleApiError","loadData","error","console","cancelDelete","response","json","setState","data","refreshList","showEdit","showDelete","prevProps","rows","map","rowBook","Object","assign","author","name","genres","genre","deleteLink","confirmDelete","model","Component","msgPrefix","idList","GridProperty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;IAEMA,K;;;;;AACJ,mBAAc;AAAA;;AAAA;;AACZ;;AADY,4DAWNA,KAAK,CAACC,QAAN,CAAe,MAAf,EAAuB,CAC7B,IAD6B,EAE7B,OAF6B,EAG7B,QAH6B,EAI7B,QAJ6B,EAK7B,SAL6B,CAAvB,CAXM;;AAAA,+DA6BH,UAACC,IAAD,EAAU;AACnB,UAAI,CAAC,MAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACxB;AACD;;AACD,UAAMC,EAAE,GAAG,MAAKF,KAAL,CAAWC,QAAX,CAAoBE,WAA/B;AACAC,mEAAO,CAAC,eAAD,EAAkB,QAAlB,EAA4BF,EAA5B,CAAP,CACGG,IADH,CACQC,4DADR,EAEGD,IAFH,CAEQ;AAAA,eAAM,MAAKE,QAAL,EAAN;AAAA,OAFR,WAGS,UAACC,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAHT;;AAIA,YAAKE,YAAL;AACD,KAvCa;;AAAA,+DAyCH,YAAM;AACfN,mEAAO,CAAC,YAAD,EAAe,KAAf,CAAP,CACGC,IADH,CACQC,4DADR,EAEGD,IAFH,CAEQ,UAACM,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OAFR,EAGGP,IAHH,CAGQ,UAACO,IAAD;AAAA,eAAU,MAAKC,QAAL,CAAc;AAAEC,cAAI,EAAEF,IAAR;AAAcG,qBAAW,EAAE;AAA3B,SAAd,CAAV;AAAA,OAHR,WAIS,UAACP,KAAD;AAAA,eAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,OAJT;AAKD,KA/Ca;;AAEZ,UAAKR,KAAL,GAAa;AACXc,UAAI,EAAE,IADK;AAEXb,cAAQ,EAAE,IAFC;AAGXe,cAAQ,EAAE,KAHC;AAIXC,gBAAU,EAAE;AAJD,KAAb;AAFY;AAQb,G,CAED;;;;;WASA,6BAAoB;AAClB,WAAKV,QAAL;AACD;;;WAED,4BAAmBW,SAAnB,EAA8B;AAC5B,UAAI,KAAKlB,KAAL,CAAWe,WAAf,EAA4B;AAC1B,aAAKR,QAAL;AACD;AACF;;;WA0BD,kBAAS;AAAA;;AACP,UAAI,CAAC,KAAKP,KAAL,CAAWc,IAAhB,EAAsB;AACpB,eAAO,EAAP;AACD;;AAHM,UAKCA,IALD,GAKU,KAAKd,KALf,CAKCc,IALD;AAOP,UAAMK,IAAI,GAAGL,IAAI,CAACM,GAAL,CAAS,UAACrB,IAAD,EAAU;AAC9B,YAAMsB,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,IAAlB,CAAhB;AACAsB,eAAO,CAAC,QAAD,CAAP,GAAoBtB,IAAI,CAACyB,MAAL,CAAYC,IAAhC;AACA,YAAIC,MAAM,GAAG3B,IAAI,CAAC2B,MAAlB;;AACA,YAAIA,MAAJ,EAAY;AACVA,gBAAM,GAAGA,MAAM,CAACN,GAAP,CAAW,UAACO,KAAD,EAAW;AAC7B,mBAAOA,KAAK,CAACF,IAAN,GAAa,GAApB;AACD,WAFQ,CAAT;AAGD;;AACDJ,eAAO,CAAC,QAAD,CAAP,GAAoBK,MAApB;AAEA,YAAME,UAAU,gBACd;AAAG,cAAI,EAAC,GAAR;AAAY,eAAK,EAAC,QAAlB;AAA2B,iBAAO,EAAE,MAAI,CAACC,aAAL,CAAmB9B,IAAnB;AAApC,oBADF;AAMAsB,eAAO,CAAC,SAAD,CAAP,gBAAqB,kFAArB;AAEA,eAAOA,OAAP;AACD,OApBY,CAAb;AAsBA,0BACE,qFACE,6FADF,eAEE,2DAAC,oDAAD;AAAM,aAAK,EAAE,KAAKS,KAAlB;AAAyB,YAAI,EAAEX;AAA/B,QAFF,CADF;AAMD;;;;EAzFiBY,+C;;gBAAdlC,K,cAkDc,UAACmC,SAAD,EAAYC,MAAZ,EAAuB;AACvC,SAAOA,MAAM,CAACb,GAAP,CAAW,UAAClB,EAAD;AAAA,WAAQ,IAAIgC,4DAAJ,CAAiBhC,EAAjB,EAAqBA,EAArB,CAAR;AAAA,GAAX,CAAP;AACD,C;;AAwCYL,oEAAf,E","file":"main.5cf9c304dea035fd56dc.hot-update.js","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from \"../common/Grid\";\nimport GridProperty from \"../common/GridProperty\";\nimport { handleApiError, doFetch } from \"../common/Tools\";\n\nclass Books extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null,\n      selected: null,\n      showEdit: false,\n      showDelete: false,\n    };\n  }\n\n  //model = Books.getModel(\"Book\", [\"id\", \"title\", \"author\", \"genres\"]);\n  model = Books.getModel(\"Book\", [\n    \"id\",\n    \"title\",\n    \"author\",\n    \"genres\",\n    \"actions\",\n  ]);\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.state.refreshList) {\n      this.loadData();\n    }\n  }\n\n  onDelete = (book) => {\n    if (!this.state.selected) {\n      return;\n    }\n    const id = this.state.selected.geo_area_id;\n    doFetch(\"/rest/tapgeo/\", \"DELETE\", id)\n      .then(handleApiError)\n      .then(() => this.loadData())\n      .catch((error) => console.error(error));\n    this.cancelDelete();\n  };\n\n  loadData = () => {\n    doFetch(\"/api/books\", \"GET\")\n      .then(handleApiError)\n      .then((response) => response.json())\n      .then((json) => this.setState({ data: json, refreshList: false }))\n      .catch((error) => console.error(error));\n  };\n\n  static getModel = (msgPrefix, idList) => {\n    return idList.map((id) => new GridProperty(id, id));\n  };\n\n  render() {\n    if (!this.state.data) {\n      return \"\";\n    }\n\n    const { data } = this.state;\n\n    const rows = data.map((book) => {\n      const rowBook = Object.assign({}, book);\n      rowBook[\"author\"] = book.author.name;\n      let genres = book.genres;\n      if (genres) {\n        genres = genres.map((genre) => {\n          return genre.name + \" \";\n        });\n      }\n      rowBook[\"genres\"] = genres;\n\n      const deleteLink = (\n        <a href=\"#\" title=\"delete\" onClick={this.confirmDelete(book)}>\n          delete\n        </a>\n      );\n\n      rowBook[\"actions\"] = <span>delete</span>;\n\n      return rowBook;\n    });\n\n    return (\n      <div>\n        <h1>Book: My React App!</h1>\n        <Grid model={this.model} data={rows} />\n      </div>\n    );\n  }\n}\n\nexport default Books;\n"],"sourceRoot":""}